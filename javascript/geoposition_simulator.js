// Generated by CoffeeScript 1.6.3
(function() {
  var GeopositionSimulator,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  GeopositionSimulator = (function() {
    function GeopositionSimulator(options) {
      this.options = options != null ? options : {};
      this.getCurrentPosition = __bind(this.getCurrentPosition, this);
      this.generateNewPosition = __bind(this.generateNewPosition, this);
      this.bounds = this.options.bounds != null ? this.options.bounds : {
        start: {
          latitude: 33.3,
          longitude: 70.5
        },
        radius: 70000
      };
      this.MAX_STEP = this.options.step != null ? this.options.step : 5;
      this.lastPosition = this.bounds.start;
    }

    GeopositionSimulator.prototype.rad = function(x) {
      return x * Math.PI / 180;
    };

    GeopositionSimulator.prototype.deg = function(theta) {
      return 180 * theta / Math.PI;
    };

    GeopositionSimulator.prototype.boundingBox = function(position, distance) {
      var RADIUS, dlat, dlon, lat, lon;
      lat = position.latitude;
      lon = position.longitude;
      RADIUS = 6371.0;
      dlat = distance / RADIUS;
      dlon = Math.asin(Math.sin(dlat) / Math.cos(this.rad(lat)));
      return {
        latitude: this.deg(dlat),
        longitude: this.deg(dlon)
      };
    };

    GeopositionSimulator.prototype.randomDeltaOfRadius = function(r) {
      return r * (Math.random() * 2 - 1);
    };

    GeopositionSimulator.prototype.generateNewPosition = function() {
      var coords, delta, difference, distance, newHeading, newPosition, position, rDeltaLat, rDeltaLng;
      distance = this.MAX_STEP / 1000;
      delta = this.boundingBox(this.lastPosition, distance);
      rDeltaLat = this.randomDeltaOfRadius(delta.latitude);
      rDeltaLng = this.randomDeltaOfRadius(delta.longitude);
      newPosition = {
        latitude: this.lastPosition.latitude + rDeltaLat,
        longitude: this.lastPosition.longitude + rDeltaLng
      };
      difference = {
        latitude: newPosition.latitude - this.lastPosition.latitude,
        longitude: newPosition.longitude - this.lastPosition.longitude
      };
      newHeading = this.deg(Math.atan(difference.latitude / difference.longitude));
      coords = {
        latitude: newPosition.latitude,
        longitude: newPosition.longitude,
        altitude: 0,
        accuracy: 0,
        altitudeAccuracy: 0,
        heading: newHeading,
        speed: 0
      };
      this.lastPosition = newPosition;
      return position = {
        coords: coords,
        timestamp: new Date().getTime()
      };
    };

    GeopositionSimulator.prototype.getCurrentPosition = function(success, error, options) {
      var newPosition;
      newPosition = this.generateNewPosition();
      return success(newPosition);
    };

    return GeopositionSimulator;

  })();

  window.GeopositionSimulator = GeopositionSimulator;

}).call(this);
